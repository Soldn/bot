import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from mcrcon import MCRcon

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
ADMIN_TAG = os.getenv("ADMIN_TAG")
RCON_HOST = os.getenv("RCON_HOST")
RCON_PORT = int(os.getenv("RCON_PORT"))
RCON_PASSWORD = os.getenv("RCON_PASSWORD")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

DONATES = {
    "Iron": 19,
    "Prince": 39,
    "Legend": 99,
    "Wither": 199,
    "Berserk": 399,
    "Solar": 799,
}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫: user_id -> (donate, nick)
pending_orders = {}

@dp.message_handler(lambda m: m.text and m.text.startswith("–•–æ—á—É –∫—É–ø–∏—Ç—å –¥–æ–Ω–∞—Ç"))
async def buy_donate(message: types.Message):
    try:
        parts = message.text.split(",")
        donate_name = parts[0].split("–¥–æ–Ω–∞—Ç")[1].strip()
        nick = parts[2].split(":")[1].strip().replace("}", "")
        price = DONATES.get(donate_name)

        if not price:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–Ω–∞—Ç.")
            return

        text = f"""–°–ø–∞—Å–∏–±–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–º–µ–Ω–Ω–æ —É –Ω–∞—Å!\n
–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –£–∫—Ä–∞–∏–Ω—ã —Ç–æ —Å–∫–∏–¥—ã–≤–∞—Ç—å —Å—é–¥–∞ —Å—É–º–º—É: 4441 1111 6434 7431\n
–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ —Ç–æ —Å–∫–∏–¥—ã–≤–∞—Ç—å —Å—é–¥–∞: https://www.donationalerts.com/r/mrronny\n\n
–°—Ç–æ–∏–º–æ—Å—Ç—å {donate_name} = {price}‚ÇΩ\n
–í–∞—à –Ω–∏–∫: {nick}\n
"""

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid:{donate_name}:{nick}"))
        await message.answer(text, reply_markup=keyboard)

    except Exception as e:
        await message.reply("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏.")
        logging.error(e)

@dp.callback_query_handler(lambda c: c.data.startswith("paid:"))
async def process_payment(callback: types.CallbackQuery):
    _, donate, nick = callback.data.split(":")
    user_id = callback.from_user.id
    pending_orders[user_id] = (donate, nick)
    await bot.send_message(user_id, "üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ.")

@dp.message_handler(content_types=["photo"])
async def handle_screenshot(message: types.Message):
    if message.from_user.id not in pending_orders:
        await message.reply("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    donate, nick = pending_orders[message.from_user.id]
    caption = f"üõí –ü–æ–∫—É–ø–∫–∞ –¥–æ–Ω–∞—Ç–∞ {donate} –¥–ª—è –Ω–∏–∫–∞ {nick}\n–û—Ç {message.from_user.full_name} (@{message.from_user.username})"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{message.from_user.id}:{donate}:{nick}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline:{message.from_user.id}:{donate}:{nick}")
    )

    await bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=caption, reply_markup=keyboard)
    await message.reply("üì§ –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")

@dp.callback_query_handler(lambda c: c.data.startswith("approve:") or c.data.startswith("decline:"))
async def admin_action(callback: types.CallbackQuery):
    action, user_id, donate, nick = callback.data.split(":")
    user_id = int(user_id)

    if action == "approve":
        try:
            with MCRcon(RCON_HOST, RCON_PASSWORD, port=RCON_PORT) as mcr:
                mcr.command(f"lp user {nick} parent add {donate}")
            await bot.send_message(user_id, f"‚úÖ –î–æ–Ω–∞—Ç {donate} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –Ω–∞ –Ω–∏–∫ {nick}. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
            await callback.message.edit_caption(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –î–æ–Ω–∞—Ç {donate} –≤—ã–¥–∞–Ω {nick}.")
        except Exception as e:
            await bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –¥–æ–Ω–∞—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            await callback.message.edit_caption(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ–Ω–∞—Ç–∞ {donate} –¥–ª—è {nick}.")
            logging.error(e)

    elif action == "decline":
        await bot.send_message(user_id, f"‚ùå –ü–æ–∫—É–ø–∫–∞ –¥–æ–Ω–∞—Ç–∞ {donate} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {ADMIN_TAG}.")
        await callback.message.edit_caption(f"‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–∫—É–ø–∫—É –¥–æ–Ω–∞—Ç–∞ {donate} –¥–ª—è {nick}.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
