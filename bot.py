import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from mcrcon import MCRcon
import os

# --- –ö–æ–Ω—Ñ–∏–≥ ---
TOKEN = os.getenv("BOT_TOKEN", "–¢–í–û–ô_–¢–û–ö–ï–ù")
ADMIN_ID = int(os.getenv("ADMIN_ID", "7301372531"))

RCON_HOST = os.getenv("RCON_HOST", "95.216.92.87")
RCON_PORT = int(os.getenv("RCON_PORT", "25821"))
RCON_PASSWORD = os.getenv("RCON_PASSWORD", "1kbgthcjjkK")

DONATES = {
    "Iron": 19,
    "Prince": 39,
    "Legend": 99,
    "Wither": 199,
    "Berserk": 399,
    "Solar": 799
}

# --- –õ–æ–≥ ---
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# --- –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–∞–π—Ç–∞ ---
@dp.message_handler(lambda message: message.text.startswith("–•–æ—á—É –∫—É–ø–∏—Ç—å –¥–æ–Ω–∞—Ç"))
async def handle_buy_request(message: types.Message):
    try:
        text = message.text
        donate = None
        nick = None

        for d in DONATES.keys():
            if f"–¥–æ–Ω–∞—Ç {d}" in text:
                donate = d
                break

        if "–ú–æ–π –Ω–∏–∫:" in text:
            nick = text.split("–ú–æ–π –Ω–∏–∫:")[1].strip().replace(".", "")

        if not donate or not nick:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ–Ω–∞—Ç –∏–ª–∏ –Ω–∏–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        message.conf = {"donate": donate, "nick": nick}

        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ", callback_data=f"paid:{donate}:{nick}"))

        await message.reply(
            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —É –Ω–∞—Å –¥–æ–Ω–∞—Ç!\n\n"
            f"üìå –î–æ–Ω–∞—Ç: {donate}\n"
            f"üí∞ –¶–µ–Ω–∞: {DONATES[donate]}‚ÇΩ\n"
            f"üë§ –ù–∏–∫: {nick}\n\n"
            "–ï—Å–ª–∏ –≤—ã –∏–∑ –£–∫—Ä–∞–∏–Ω—ã üá∫üá¶ ‚Äî –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—é–¥–∞: `4441 1111 6434 7431`\n"
            "–ï—Å–ª–∏ –≤—ã –∏–∑ –†–æ—Å—Å–∏–∏ üá∑üá∫ ‚Äî –æ–ø–ª–∞—Ç–∏—Ç–µ —Ç—É—Ç: https://www.donationalerts.com/r/mrronny",
            reply_markup=kb,
            parse_mode="Markdown"
        )

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

@dp.callback_query_handler(lambda c: c.data.startswith("paid:"))
async def handle_paid(callback: types.CallbackQuery):
    _, donate, nick = callback.data.split(":")
    await callback.message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω –∏–ª–∏ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ üßæ")
    await bot.send_message(ADMIN_ID,
        f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ–ø–ª–∞—Ç—ã!\n\n"
        f"üë§ –ù–∏–∫: {nick}\n"
        f"üíé –î–æ–Ω–∞—Ç: {donate}\n"
        f"üí∞ –¶–µ–Ω–∞: {DONATES[donate]}‚ÇΩ\n\n"
        f"–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã."
    )

@dp.message_handler(content_types=['photo', 'document'])
async def handle_payment_proof(message: types.Message):
    if message.reply_to_message and "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω" in message.reply_to_message.text:
        await message.forward(ADMIN_ID)
        await bot.send_message(ADMIN_ID,
            f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {message.from_user.username or message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —á–µ–∫."
        )

        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{message.from_user.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline:{message.from_user.id}")
        )
        await bot.send_message(ADMIN_ID, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("approve:"))
async def approve_payment(callback: types.CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–î–æ–Ω–∞—Ç –≤—ã–¥–∞–Ω üéâ")
    try:
        with MCRcon(RCON_HOST, RCON_PASSWORD, port=RCON_PORT) as mcr:
            nick, donate = "TEST", "Iron"  # ‚ö†Ô∏è –≤—Ä–µ–º–µ–Ω–Ω–æ
            mcr.command(f"lp user {nick} parent add {donate}")
    except Exception as e:
        await bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ RCON: {e}")

@dp.callback_query_handler(lambda c: c.data.startswith("decline:"))
async def decline_payment(callback: types.CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    await bot.send_message(user_id, "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º @Soldi_n")
    await callback.answer("–û—Ç–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
