import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from mcrcon import MCRcon

API_TOKEN = "YOUR_BOT_TOKEN"
ADMIN_ID = 7301372531
RCON_HOST = "95.216.92.87"
RCON_PORT = 25821
RCON_PASSWORD = "1kbgthcjjkK"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

DONATES = {
    "Iron": 19,
    "Gold": 49,
    "Diamond": 99,
    "Solar": 199
}

# –•—Ä–∞–Ω–∏–º –∑–∞—è–≤–∫–∏
pending_orders = {}

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å –¥–æ–Ω–∞—Ç, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å–∞–π—Ç–µ, –∏ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.")

@dp.message_handler(lambda m: m.text and m.text.startswith("–•–æ—á—É –∫—É–ø–∏—Ç—å –¥–æ–Ω–∞—Ç"))
async def handle_buy_request(message: types.Message):
    try:
        parts = message.text.split("–ú–æ–π –Ω–∏–∫:")
        donate_info = parts[0].replace("–•–æ—á—É –∫—É–ø–∏—Ç—å –¥–æ–Ω–∞—Ç", "").strip().split(", –µ–≥–æ —Ü–µ–Ω–∞")
        donate_name = donate_info[0].strip()
        nick = parts[1].strip()
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid:{donate_name}:{nick}"))
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –¥–æ–Ω–∞—Ç —É –Ω–∞—Å ‚ù§Ô∏è

"
        f"üìå –í–∞—à –¥–æ–Ω–∞—Ç: {donate_name}
"
        f"üë§ –ù–∏–∫: {nick}

"
        f"üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞: 4441 1111 6434 7431
"
        f"üá∑üá∫ –†–æ—Å—Å–∏—è: https://www.donationalerts.com/r/mrronny

"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=kb
    )

@dp.callback_query_handler(lambda c: c.data.startswith("paid:"))
async def process_paid(callback: types.CallbackQuery):
    _, donate, nick = callback.data.split(":")
    order_id = f"{callback.from_user.id}_{donate}_{nick}"
    pending_orders[order_id] = {"donate": donate, "nick": nick}

    await callback.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç/—á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ üëá")

@dp.message_handler(content_types=["photo"])
async def handle_payment_proof(message: types.Message):
    for order_id, data in list(pending_orders.items()):
        if str(message.from_user.id) in order_id:
            donate, nick = data["donate"], data["nick"]
            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{order_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline:{order_id}")
            )
            await bot.send_photo(
                ADMIN_ID, photo=message.photo[-1].file_id,
                caption=f"–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–Ω–∞—Ç:

üë§ –ù–∏–∫: {nick}
üéÅ –î–æ–Ω–∞—Ç: {donate}",
                reply_markup=kb
            )
            await message.answer("–í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ")
            return

@dp.callback_query_handler(lambda c: c.data.startswith("approve:") or c.data.startswith("decline:"))
async def process_admin_action(callback: types.CallbackQuery):
    action, order_id = callback.data.split(":")
    data = pending_orders.get(order_id)

    if not data:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    donate, nick = data["donate"], data["nick"]
    user_id = int(order_id.split("_")[0])

    if action == "approve":
        try:
            with MCRcon(RCON_HOST, RCON_PASSWORD, port=RCON_PORT) as mcr:
                mcr.command(f"lp user {nick} parent add {donate}")
            await bot.send_message(user_id, f"‚úÖ –î–æ–Ω–∞—Ç {donate} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç {nick}!")
        except Exception as e:
            await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –¥–æ–Ω–∞—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É @Soldi_n
–û—à–∏–±–∫–∞: {e}")
    else:
        await bot.send_message(user_id, "‚ùå –ü–æ–∫—É–ø–∫–∞ –¥–æ–Ω–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º @Soldi_n")

    del pending_orders[order_id]
    await callback.message.edit_reply_markup()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
